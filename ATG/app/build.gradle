plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.kuhakupixel.atg'
    compileSdk 34

    defaultConfig {
        applicationId "com.kuhakupixel.atg"
        minSdk 26
        // can't run binary without root if targetSdk > 28
        // true
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    // ==================================== for building memory scanner/editor binary  ======================
    // https://stackoverflow.com/questions/38917297/compile-and-use-abi-dependent-executable-binaries-in-android-with-android-studio
    // https://developer.android.com/studio/projects/gradle-external-native-builds
    externalNativeBuild {
        cmake {
            path "../../ACE/CMakeLists.txt"
        }
    }
    defaultConfig {
        externalNativeBuild {
            cmake {
                targets "ACE", "util_client"
                arguments "-DANDROID_PLATFORM=android-23", "-DACE_ANDROID_BINARY_ROOT_OUTPUT_DIR=./src/main/assets/bin/ACE", "-DCMAKE_BUILD_TYPE=Release"
                // the cpu arch we want to support :D
                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }
    // ============================================================================================

    signingConfigs {
        release {
            storeFile file('release.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    // Configure APK output naming
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == 'release') {
                outputFileName = "${variant.name}-signed.apk"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.0'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    // =============================== frontend stuff ===========
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.4'
    implementation 'androidx.activity:activity-compose:1.9.1'
    implementation platform('androidx.compose:compose-bom:2024.06.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.ui:ui-android:1.6.8'
    def material3Version = "1.1.0-beta02"
    implementation "androidx.compose.material3:material3:${material3Version}"
    //
    implementation "androidx.compose.material:material:1.6.8"
    //
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2024.06.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    // navigation with compose
    def nav_version = "2.5.3"
    implementation "androidx.navigation:navigation-compose:$nav_version"
    // creating overlay window
    def libUberAllesVersion = '0.0.6'
    implementation "com.github.KuhakuPixel:UberAlles:${libUberAllesVersion}"
    // ========================= for communication with ACE ===============
    // apache commons
    implementation 'commons-io:commons-io:2.13.0'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    // guava (for bimap because java doesn't provide one :(
    implementation 'com.google.guava:guava:33.2.1-jre'
    // for communication
    implementation 'org.zeromq:jeromq:0.5.3'
    // jsons
    implementation 'com.google.code.gson:gson:2.10.1'
    // ====================
    def libsuVersion = '5.0.4'
    // The core module that provides APIs to a shell
    implementation "com.github.topjohnwu.libsu:core:${libsuVersion}"
    // for scrollbar
    implementation 'com.github.KuhakuPixel:LazyColumnScrollbar:1.7.3'



}
