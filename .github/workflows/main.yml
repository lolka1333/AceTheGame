name: AceTheGame CI/CD
on: 
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  release:
    types: [published]

jobs:
  ACE:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      - name: "apt update"
        run: sudo apt-get update
      - name: "install compiler and build tools"
        run: sudo apt-get install build-essential -y

      - name: create build directory
        working-directory: ./ACE
        run: mkdir build

      # Debug build
      - name: debug build
        working-directory: ./ACE/build
        run: |
          cmake -DCMAKE_BUILD_TYPE=Debug ../
          make -j$(nproc)

      - name: debug unit test
        working-directory: ./ACE/build
        run: ./test/test_ace -s

      - name: upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ace-debug
          path: ./ACE/build/*

      # Release build
      - name: release build
        working-directory: ./ACE/build
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release ../ 
          make -j$(nproc)

      - name: release unit test
        working-directory: ./ACE/build
        run: ./test/test_ace -s

      - name: upload release artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ace-release
          path: ./ACE/build/*

  Modder-linux:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: "apt update"
        run: sudo apt-get update
      - name: "install build dependencies"
        run: sudo apt-get install openjdk-17-jdk-headless apktool gradle -y

      - name: generating code for injection
        working-directory: ./Modder/injector
        run: python3 ./gen_smali.py

      - name: build
        working-directory: ./Modder
        run: ./gradlew build -x test

      - name: test
        working-directory: ./Modder
        run: ./gradlew test

      - name: Check Modder artifacts
        run: |
          if [ -d "./Modder/modder/build/libs" ]; then
            echo "Modder artifacts found:"
            ls -la ./Modder/modder/build/libs/
          else
            echo "Modder artifacts not found"
            mkdir -p ./Modder/modder/build/libs/
            echo "No JAR files generated" > ./Modder/modder/build/libs/README.txt
          fi

      - name: upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: modder-linux
          path: ./Modder/modder/build/libs/*

  Modder-windows:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10' 

      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu' 
          java-version: '17'

      - name: "install build tools"
        run: choco install apktool --version=2.5.0

      - name: "install pkgconfig"
        run: choco install pkgconfiglite

      - name: generating code for injection
        working-directory: ./Modder/injector
        run: python ./gen_smali.py

      - name: build
        working-directory: ./Modder
        run: ./gradlew build -x test

      - name: test
        working-directory: ./Modder
        run: ./gradlew test

      - name: Check Modder artifacts
        run: |
          if (Test-Path "./Modder/modder/build/libs") {
            Write-Host "Modder artifacts found:"
            Get-ChildItem -Path "./Modder/modder/build/libs/" -Force
          } else {
            Write-Host "Modder artifacts not found"
            New-Item -ItemType Directory -Path "./Modder/modder/build/libs/" -Force
            "No JAR files generated" | Out-File -FilePath "./Modder/modder/build/libs/README.txt"
          }

      - name: upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: modder-windows
          path: ./Modder/modder/build/libs/*

  ATG:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      - name: "apt update"
        run: sudo apt-get update
      - name: "install build dependencies"
        run: sudo apt-get install openjdk-17-jdk-headless fd-find -y

      - name: "setup JAVA_HOME to java 17"
        run: |
          JAVA_HOME=$(fdfind java-17 /usr/lib/jvm | xargs readlink -f)
          echo "JAVA_HOME=${JAVA_HOME}" >> $GITHUB_ENV
          echo "JAVA_HOME set to ${JAVA_HOME}"

      - name: build
        working-directory: ./ATG
        run: ./gradlew assembleDebug

      # Sign APK files
      - name: Setup keystore
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
        run: |
          echo "${{ secrets.APP_KEYSTORE_BASE64 }}" | base64 -d > ./ATG/app/keystore.jks
          
      - name: Sign APK
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
        working-directory: ./ATG
        run: |
          # Find the APK file
          APK_PATH=$(find ./app/build/outputs/apk/debug -name "*.apk" | head -1)
          if [ -n "$APK_PATH" ]; then
            echo "Found APK: $APK_PATH"
            
            # Create a copy of the unsigned APK
            cp "$APK_PATH" "${APK_PATH}.unsigned"
            
            # Remove existing signatures from APK if present
            echo "Removing existing signatures if any..."
            zip -d "$APK_PATH" "META-INF/*.SF" "META-INF/*.RSA" "META-INF/*.DSA" "META-INF/MANIFEST.MF" 2>/dev/null || true
            
            # Sign the APK using jarsigner with SHA256
            echo "Signing APK..."
            jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA256 \
              -keystore ./app/keystore.jks \
              -storepass "${{ secrets.APP_KEYSTORE_PASSWORD }}" \
              -keypass "${{ secrets.APP_KEY_PASSWORD }}" \
              -tsa http://timestamp.digicert.com \
              "$APK_PATH" "${{ secrets.APP_KEYSTORE_ALIAS }}"
            
            # Verify the signature
            echo "Verifying signature..."
            jarsigner -verify -verbose -certs "$APK_PATH"
            
            # Install Android SDK build-tools if needed
            if ! command -v zipalign &> /dev/null; then
              ANDROID_SDK_ROOT="/usr/local/lib/android/sdk"
              BUILD_TOOLS_VERSION="34.0.0"
              ZIPALIGN="${ANDROID_SDK_ROOT}/build-tools/${BUILD_TOOLS_VERSION}/zipalign"
              
              if [ ! -f "$ZIPALIGN" ]; then
                echo "Installing Android SDK build-tools..."
                sdkmanager --install "build-tools;${BUILD_TOOLS_VERSION}" || {
                  # Fallback to apt package
                  sudo apt-get install -y zipalign
                  ZIPALIGN="zipalign"
                }
              fi
            else
              ZIPALIGN="zipalign"
            fi
            
            # Zipalign the APK
            if command -v "$ZIPALIGN" &> /dev/null || [ -f "$ZIPALIGN" ]; then
              echo "Zipaligning APK..."
              mv "$APK_PATH" "${APK_PATH}.unaligned"
              "$ZIPALIGN" -v 4 "${APK_PATH}.unaligned" "$APK_PATH"
              rm -f "${APK_PATH}.unaligned"
              echo "APK zipaligned successfully"
            else
              echo "Warning: zipalign not found, skipping zipalign step"
            fi
            
            # Clean up backup
            rm -f "${APK_PATH}.unsigned"
            
            echo "APK signed and processed successfully: $APK_PATH"
          else
            echo "No APK file found to sign"
          fi
          
          # Clean up keystore for security
          rm -f ./app/keystore.jks

      - name: Check ATG artifacts
        run: |
          if [ -d "./ATG/app/build/outputs/apk/debug" ]; then
            echo "ATG artifacts found:"
            ls -la ./ATG/app/build/outputs/apk/debug/
          else
            echo "ATG artifacts not found"
            mkdir -p ./ATG/app/build/outputs/apk/debug/
            echo "No APK files generated" > ./ATG/app/build/outputs/apk/debug/README.txt
          fi

      - name: upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: atg
          path: ./ATG/app/build/outputs/apk/debug/*

  billing-hack:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      - name: "apt update"
        run: sudo apt-get update
      - name: "install build dependencies"
        run: sudo apt-get install openjdk-17-jdk-headless fd-find -y

      - name: "setup JAVA_HOME to java 17"
        run: |
          JAVA_HOME=$(fdfind java-17 /usr/lib/jvm | xargs readlink -f)
          echo "JAVA_HOME=${JAVA_HOME}" >> $GITHUB_ENV
          echo "JAVA_HOME set to ${JAVA_HOME}"

      - name: build
        working-directory: ./billing-hack
        run: ./gradlew assembleDebug

      # Sign APK files
      - name: Setup keystore
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
        run: |
          echo "${{ secrets.APP_KEYSTORE_BASE64 }}" | base64 -d > ./billing-hack/app/keystore.jks
          
      - name: Sign APK
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
        working-directory: ./billing-hack
        run: |
          # Find the APK file
          APK_PATH=$(find ./app/build/outputs/apk/debug -name "*.apk" | head -1)
          if [ -n "$APK_PATH" ]; then
            echo "Found APK: $APK_PATH"
            
            # Create a copy of the unsigned APK
            cp "$APK_PATH" "${APK_PATH}.unsigned"
            
            # Remove existing signatures from APK if present
            echo "Removing existing signatures if any..."
            zip -d "$APK_PATH" "META-INF/*.SF" "META-INF/*.RSA" "META-INF/*.DSA" "META-INF/MANIFEST.MF" 2>/dev/null || true
            
            # Sign the APK using jarsigner with SHA256
            echo "Signing APK..."
            jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA256 \
              -keystore ./app/keystore.jks \
              -storepass "${{ secrets.APP_KEYSTORE_PASSWORD }}" \
              -keypass "${{ secrets.APP_KEY_PASSWORD }}" \
              -tsa http://timestamp.digicert.com \
              "$APK_PATH" "${{ secrets.APP_KEYSTORE_ALIAS }}"
            
            # Verify the signature
            echo "Verifying signature..."
            jarsigner -verify -verbose -certs "$APK_PATH"
            
            # Install Android SDK build-tools if needed
            if ! command -v zipalign &> /dev/null; then
              ANDROID_SDK_ROOT="/usr/local/lib/android/sdk"
              BUILD_TOOLS_VERSION="34.0.0"
              ZIPALIGN="${ANDROID_SDK_ROOT}/build-tools/${BUILD_TOOLS_VERSION}/zipalign"
              
              if [ ! -f "$ZIPALIGN" ]; then
                echo "Installing Android SDK build-tools..."
                sdkmanager --install "build-tools;${BUILD_TOOLS_VERSION}" || {
                  # Fallback to apt package
                  sudo apt-get install -y zipalign
                  ZIPALIGN="zipalign"
                }
              fi
            else
              ZIPALIGN="zipalign"
            fi
            
            # Zipalign the APK
            if command -v "$ZIPALIGN" &> /dev/null || [ -f "$ZIPALIGN" ]; then
              echo "Zipaligning APK..."
              mv "$APK_PATH" "${APK_PATH}.unaligned"
              "$ZIPALIGN" -v 4 "${APK_PATH}.unaligned" "$APK_PATH"
              rm -f "${APK_PATH}.unaligned"
              echo "APK zipaligned successfully"
            else
              echo "Warning: zipalign not found, skipping zipalign step"
            fi
            
            # Clean up backup
            rm -f "${APK_PATH}.unsigned"
            
            echo "APK signed and processed successfully: $APK_PATH"
          else
            echo "No APK file found to sign"
          fi
          
          # Clean up keystore for security
          rm -f ./app/keystore.jks

      - name: Check billing-hack artifacts
        run: |
          if [ -d "./billing-hack/app/build/outputs/apk/debug" ]; then
            echo "billing-hack artifacts found:"
            ls -la ./billing-hack/app/build/outputs/apk/debug/
          else
            echo "billing-hack artifacts not found"
            mkdir -p ./billing-hack/app/build/outputs/apk/debug/
            echo "No APK files generated" > ./billing-hack/app/build/outputs/apk/debug/README.txt
          fi

      - name: upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: billing-hack
          path: ./billing-hack/app/build/outputs/apk/debug/*

  # Android Release Build (with NDK for ACE)
  android-release:
    runs-on: ubuntu-22.04
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: [ACE, Modder-linux, ATG, billing-hack]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      - name: "apt update"
        run: sudo apt-get update
      - name: "install build dependencies"
        run: |
          sudo apt-get install -y build-essential cmake unzip wget python3 openjdk-17-jdk-headless apktool fd-find

      - name: "setup JAVA_HOME to java 17"
        run: |
          JAVA_HOME=$(fdfind java-17 /usr/lib/jvm | xargs readlink -f)
          echo "JAVA_HOME=${JAVA_HOME}" >> $GITHUB_ENV
          echo "JAVA_HOME set to ${JAVA_HOME}"

      - name: "install Android SDK"
        run: |
          sudo apt-get install -y android-sdk sdkmanager
          echo "ANDROID_HOME=/usr/lib/android-sdk" >> $GITHUB_ENV

      - name: "install Android NDK"
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r25c-linux.zip -O ndk.zip
          unzip ndk.zip -d ndk
          rm ndk.zip
          echo "ANDROID_NDK_HOME=$PWD/ndk/android-ndk-r25c" >> $GITHUB_ENV

      - name: "accept Android SDK licenses"
        run: yes | sdkmanager --licenses || true

      - name: "build full release"
        run: |
          python3 ./make_release.py ./ndk/android-ndk-r25c/build/cmake/android.toolchain.cmake

      # Sign APK files in release
      - name: Setup keystore for release
        run: |
          echo "${{ secrets.APP_KEYSTORE_BASE64 }}" | base64 -d > ./release/keystore.jks
          
      - name: Sign Release APK files
        run: |
          # Install Android SDK build-tools if needed
          if ! command -v zipalign &> /dev/null; then
            ANDROID_SDK_ROOT="/usr/local/lib/android/sdk"
            BUILD_TOOLS_VERSION="34.0.0"
            ZIPALIGN="${ANDROID_SDK_ROOT}/build-tools/${BUILD_TOOLS_VERSION}/zipalign"
            
            if [ ! -f "$ZIPALIGN" ]; then
              echo "Installing Android SDK build-tools..."
              sdkmanager --install "build-tools;${BUILD_TOOLS_VERSION}" || {
                # Fallback to apt package
                sudo apt-get install -y zipalign
                ZIPALIGN="zipalign"
              }
            fi
          else
            ZIPALIGN="zipalign"
          fi
          
          # Find and sign all APK files in the release directory
          find ./release -name "*.apk" | while read APK_PATH; do
            if [ -f "$APK_PATH" ]; then
              echo "Processing APK: $APK_PATH"
              
              # Create a copy of the unsigned APK
              cp "$APK_PATH" "${APK_PATH}.unsigned"
              
              # Remove existing signatures from APK if present
              echo "Removing existing signatures if any..."
              zip -d "$APK_PATH" "META-INF/*.SF" "META-INF/*.RSA" "META-INF/*.DSA" "META-INF/MANIFEST.MF" 2>/dev/null || true
              
              # Sign the APK using jarsigner with SHA256
              echo "Signing APK..."
              jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA256 \
                -keystore ./release/keystore.jks \
                -storepass "${{ secrets.APP_KEYSTORE_PASSWORD }}" \
                -keypass "${{ secrets.APP_KEY_PASSWORD }}" \
                -tsa http://timestamp.digicert.com \
                "$APK_PATH" "${{ secrets.APP_KEYSTORE_ALIAS }}"
              
              # Verify the signature
              echo "Verifying signature..."
              jarsigner -verify -verbose -certs "$APK_PATH"
              
              # Zipalign the APK
              if command -v "$ZIPALIGN" &> /dev/null || [ -f "$ZIPALIGN" ]; then
                echo "Zipaligning APK..."
                mv "$APK_PATH" "${APK_PATH}.unaligned"
                "$ZIPALIGN" -v 4 "${APK_PATH}.unaligned" "$APK_PATH"
                rm -f "${APK_PATH}.unaligned"
                echo "APK zipaligned successfully"
              else
                echo "Warning: zipalign not found, skipping zipalign step"
              fi
              
              # Clean up backup
              rm -f "${APK_PATH}.unsigned"
              
              echo "APK signed and processed successfully: $APK_PATH"
            fi
          done
          
          # Clean up keystore
          rm -f ./release/keystore.jks

      - name: "package release"
        run: |
          cd release
          find . -name "*.zip" -o -name "*.tar.gz" -o -name "*.apk" -o -name "*.jar" | head -20
          tar -czf ../AceTheGame-release.tar.gz *

      - name: upload full release
        uses: actions/upload-artifact@v4
        with:
          name: AceTheGame-full-release
          path: |
            release/
            AceTheGame-release.tar.gz

  # Create GitHub Release
  create-release:
    runs-on: ubuntu-22.04
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    needs: [ACE, Modder-linux, Modder-windows, ATG, billing-hack, android-release]
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release bundle
        run: |
          mkdir -p release-bundle
          
          # Copy all artifacts to release bundle
          find artifacts -type f \( -name "*.apk" -o -name "*.jar" -o -name "*.so" -o -name "*.exe" -o -name "*.tar.gz" \) -exec cp {} release-bundle/ \;
          
          # Create individual zip files for each component
          cd artifacts
          for dir in */; do
            if [ -d "$dir" ]; then
              zip -r "../release-bundle/${dir%/}.zip" "$dir"
            fi
          done
          cd ..
          
          # Create main release archive
          cd release-bundle
          tar -czf ../AceTheGame-complete-release.tar.gz *
          zip -r ../AceTheGame-complete-release.zip *
          cd ..

      - name: Upload release bundle
        uses: actions/upload-artifact@v4
        with:
          name: complete-release-bundle
          path: |
            release-bundle/
            AceTheGame-complete-release.tar.gz
            AceTheGame-complete-release.zip

      - name: Create GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            AceTheGame-complete-release.tar.gz
            AceTheGame-complete-release.zip
            release-bundle/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
